# -*- coding: utf-8 -*-
"""iris flower classification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vi8Q1IpnY4YJgm1Rz1E3mna7fUIaOjLC
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
from sklearn. metrics import accuracy_score
# %matplotlib inline

df = pd.read_csv('/content/Iris.csv')

df.head()

df.shape

df.describe()

df.groupby(["Species"]).describe().T

df.info()

df.isnull().sum()

df.columns

#checking for different types of classes
df["Species"].value_counts()

df.dtypes

#visualisation of whole dataset
sns.pairplot(df, hue = 'Species')

sns.FacetGrid(df,hue ='Species',height=5).map(plt.scatter,"SepalLengthCm","PetalLengthCm").add_legend

sns.boxplot(x= 'Species', y='SepalLengthCm', data=df)

sns.boxplot(x= 'Species', y='SepalWidthCm', data=df)

sns.boxplot(x= 'Species', y='PetalLengthCm', data=df)

sns.boxplot(x= 'Species', y='PetalWidthCm', data=df)

plt.hist(df["SepalLengthCm"])

plt.hist(df["SepalWidthCm"])

plt.hist(df["PetalLengthCm"])

plt.hist(df["PetalWidthCm"])

x= df[["SepalLengthCm","SepalWidthCm","PetalLengthCm","PetalLengthCm"]].value_counts
y= df[["Species"]].values

print(x)

print(y)

#correlation Matrix
correlation_matrix = df.corr()

sns.heatmap(correlation_matrix, annot=True,cmap= 'coolwarm')
plt.title('correlation Matix')
plt.show()

pip install scikit-learn

from sklearn.linear_model import LogisticRegression

X= df.drop("Species", axis=1)
y= df["Species"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

model = LogisticRegression()

model.fit(X, y)

model.score(X, y).round(2)

#Prediction
Actual = y
prediction = model.predict(x)

from sklearn import metrics

print(metrics.classification_report(Actual,prediction))

print(metrics.confusion_matrix(Actual,prediction))